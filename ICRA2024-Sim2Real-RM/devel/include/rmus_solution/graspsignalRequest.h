// Generated by gencpp from file rmus_solution/graspsignalRequest.msg
// DO NOT EDIT!


#ifndef RMUS_SOLUTION_MESSAGE_GRASPSIGNALREQUEST_H
#define RMUS_SOLUTION_MESSAGE_GRASPSIGNALREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace rmus_solution
{
template <class ContainerAllocator>
struct graspsignalRequest_
{
  typedef graspsignalRequest_<ContainerAllocator> Type;

  graspsignalRequest_()
    : mode(0)
    , call()  {
    }
  graspsignalRequest_(const ContainerAllocator& _alloc)
    : mode(0)
    , call(_alloc)  {
  (void)_alloc;
    }



   typedef uint8_t _mode_type;
  _mode_type mode;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _call_type;
  _call_type call;





  typedef boost::shared_ptr< ::rmus_solution::graspsignalRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::rmus_solution::graspsignalRequest_<ContainerAllocator> const> ConstPtr;

}; // struct graspsignalRequest_

typedef ::rmus_solution::graspsignalRequest_<std::allocator<void> > graspsignalRequest;

typedef boost::shared_ptr< ::rmus_solution::graspsignalRequest > graspsignalRequestPtr;
typedef boost::shared_ptr< ::rmus_solution::graspsignalRequest const> graspsignalRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::rmus_solution::graspsignalRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::rmus_solution::graspsignalRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::rmus_solution::graspsignalRequest_<ContainerAllocator1> & lhs, const ::rmus_solution::graspsignalRequest_<ContainerAllocator2> & rhs)
{
  return lhs.mode == rhs.mode &&
    lhs.call == rhs.call;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::rmus_solution::graspsignalRequest_<ContainerAllocator1> & lhs, const ::rmus_solution::graspsignalRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace rmus_solution

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::rmus_solution::graspsignalRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::rmus_solution::graspsignalRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::rmus_solution::graspsignalRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::rmus_solution::graspsignalRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rmus_solution::graspsignalRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rmus_solution::graspsignalRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::rmus_solution::graspsignalRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "8137b29b76a1895dc6bb6316e834de88";
  }

  static const char* value(const ::rmus_solution::graspsignalRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x8137b29b76a1895dULL;
  static const uint64_t static_value2 = 0xc6bb6316e834de88ULL;
};

template<class ContainerAllocator>
struct DataType< ::rmus_solution::graspsignalRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "rmus_solution/graspsignalRequest";
  }

  static const char* value(const ::rmus_solution::graspsignalRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::rmus_solution::graspsignalRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint8 mode\n"
"string call\n"
;
  }

  static const char* value(const ::rmus_solution::graspsignalRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::rmus_solution::graspsignalRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.mode);
      stream.next(m.call);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct graspsignalRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::rmus_solution::graspsignalRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::rmus_solution::graspsignalRequest_<ContainerAllocator>& v)
  {
    s << indent << "mode: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.mode);
    s << indent << "call: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.call);
  }
};

} // namespace message_operations
} // namespace ros

#endif // RMUS_SOLUTION_MESSAGE_GRASPSIGNALREQUEST_H
